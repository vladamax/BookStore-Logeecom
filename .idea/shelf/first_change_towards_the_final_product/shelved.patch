Index: Src/DataAccess/SessionBookRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace BookStore\\DataAccess;\n\nuse BookStore\\Business\\Interfaces\\Repositories\\IBookRepository;\nuse BookStore\\Presentation\\Models\\Book;\n\n//require __DIR__ . \"/../Business/Interfaces/Repositories/IBookRepository.php\";\n//require __DIR__ . \"/../Presentation/Models/Book.php\";\n\nclass SessionBookRepository implements IBookRepository\n{\n    private array $books;\n\n    // Initializes a session and fills an array of books with mock objects that will be used as test data\n    public function loadTheData(): array\n    {\n        $books = [new Book(1, \"Orlovi rano lete\"),\n            new Book(2, \"Mi deca sa stanice ZOO\"),\n            new Book(3, \"Izgubiti Juliju\")];\n\n        $_SESSION[\"books\"] = $books;\n        return $books;\n    }\n    // Searches through the array of books and\n    // uses SESSION to pass values important for the selected book and for the life of other functions\n    public function findById()\n    {\n        $this->books = $_SESSION[\"books\"];\n        $id = $_SESSION[\"id\"];\n        foreach ($this->books as $book) {\n            if ($book->id == $id) {\n                $_SESSION[\"name\"] = $book->getName();\n                break;\n            }\n        }\n    }\n\n    // Inserts a new book to the array of books\n    public function insert(string $name)\n    {\n        $this->books = $_SESSION[\"books\"];\n        array_push($this->books, new Book(4, $name));\n        $_SESSION[\"books\"] = $this->books;\n    }\n\n    // Deletes the selected book\n    public function delete(int $id): int\n    {\n        $flag = 0;\n        $idd = 0;\n        $this->books = $_SESSION[\"books\"];\n        foreach ($this->books as $book) {\n            if ($book->id == $id) {\n                $flag = 1;\n                break;\n            }\n            $idd++;\n        }\n\n        if ($flag) {\n            array_splice($this->books, $idd, 1);\n            $_SESSION[\"books\"] = $this->books;\n            return 1;\n        }\n        return 0;\n    }\n\n    // Updates the data concerning the selected book\n    public function update(string $nameUpdated,int $id)\n    {\n        $this->books = $_SESSION[\"books\"];\n        foreach ($this->books as $book) {\n            if ($book->getName() == $_SESSION[\"name\"]) {\n                $book->setName($nameUpdated);\n                $_SESSION['books'] = $this->books;\n                $_SESSION[\"name\"] = '';\n                $_SESSION[\"nameUpdated\"] = '';\n                break;\n            }\n        }\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Src/DataAccess/SessionBookRepository.php b/Src/DataAccess/SessionBookRepository.php
--- a/Src/DataAccess/SessionBookRepository.php	(revision eeb1824959cfa3342356da3205cd941578478457)
+++ b/Src/DataAccess/SessionBookRepository.php	(date 1649339707785)
@@ -67,7 +67,7 @@
     }
 
     // Updates the data concerning the selected book
-    public function update(string $nameUpdated,int $id)
+    public function update(string $titleUpdated, int $year)
     {
         $this->books = $_SESSION["books"];
         foreach ($this->books as $book) {
Index: Src/DataAccess/DBBookRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace BookStore\\DataAccess;\n\nuse BookStore\\Business\\Interfaces\\Repositories\\IBookRepository;\nuse BookStore\\Business\\Models\\Book;\n\nrequire(__DIR__ . \"/../mySqlConnect.php\");\n\nclass DBBookRepository implements IBookRepository\n{\n    /**\n     * @var array\n     */\n    private array $books = array();\n\n    /** Fetch the books from the database\n     * @param int $id\n     * @return array\n     */\n    public function loadTheData(int $id): array\n    {\n        global $dataBaseConnection;\n        $dataBaseConnection = @mysqli_connect(DB_HOST , DB_USER , DB_PASSWORD , DB_NAME)\n        OR die(\"Couldn't connect to MYSql\" . mysqli_connect_error());\n        // Create a query for the database\n        $query = 'SELECT title,book_id,year,author_id FROM Book WHERE author_id='. $id .';';\n\n        // Get a response from the database by sending the connection\n        // and the query\n        $response = @mysqli_query($dataBaseConnection, $query);\n        // If the query executed properly proceed\n        if ($response) {\n        // mysqli_fetch_array will return a row of data from the query\n        // until no further data is available\n            while ($row = mysqli_fetch_array($response)) {\n                array_push($this->books, new Book($row['book_id'], $row['title'], (int)$row['year'] , $row['author_id']));\n            }\n        } else {\n\n            echo \"Couldn't issue database query<br />\";\n\n            echo mysqli_error($dataBaseConnection);\n\n        }\n        return $this->books;\n    }\n\n    /** Inserts a book into database\n     * @param string $title\n     * @param int $year\n     * @param int $id\n     * @return mixed|void\n     */\n    public function insert(string $title, int $year , int $id)\n    {\n        global $dataBaseConnection;\n\n        $query = 'INSERT INTO Book (title,year,author_id) VALUES (\"' . $title . '\",'. $year .','. $id .');';\n        $response = @mysqli_query($dataBaseConnection, $query);\n        echo mysqli_error($dataBaseConnection);\n    }\n\n    /** Deletes the chosen book\n     * @param int $id\n     * @return int\n     */\n    public function delete(int $id): int\n    {\n        global $dataBaseConnection;\n\n        $query = \"DELETE FROM Book WHERE book_id = \" . $id . \";\";\n\n        $response = @mysqli_query($dataBaseConnection, $query);\n        // If the query executed properly proceed\n\n        if ($response) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /** Updates the book\n     * @param string $titleUpdated\n     * @param int $year\n     * @param int $id\n     * @return mixed|void\n     */\n    public function update(string $titleUpdated, int $year , int $id)\n    {\n\n        global $dataBaseConnection;\n\n        $query = \"UPDATE Book SET title='\" . $titleUpdated . \"' , year=\" . $year .\" WHERE book_id = \" . $id . \";\";\n\n        $response = @mysqli_query($dataBaseConnection, $query);\n    }\n\n    /** Finds the book using its id\n     * @param int $id\n     * @return void\n     */\n    public function findById(int $id) : Book\n    {\n        $books = $this->loadTheData($_POST['authorId']);\n        foreach($books as $book)\n        {\n            if ($book->getId() == $id)\n            {\n                return $book;\n            }\n        }\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Src/DataAccess/DBBookRepository.php b/Src/DataAccess/DBBookRepository.php
--- a/Src/DataAccess/DBBookRepository.php	(revision eeb1824959cfa3342356da3205cd941578478457)
+++ b/Src/DataAccess/DBBookRepository.php	(date 1649412668669)
@@ -4,6 +4,8 @@
 
 use BookStore\Business\Interfaces\Repositories\IBookRepository;
 use BookStore\Business\Models\Book;
+use BookStore\PDOConnection;
+use PDO;
 
 require(__DIR__ . "/../mySqlConnect.php");
 
@@ -15,16 +17,50 @@
     private array $books = array();
 
     /** Fetch the books from the database
-     * @param int $id
+     * @param int $authorId
      * @return array
      */
-    public function loadTheData(int $id): array
+
+    private PDOConnection $pdo;
+
+
+
+
+//$first_name = "derpe";
+//
+//// FETCH MULTIPLE POSTS
+//
+//// Positional params
+//$sql = 'SELECT * FROM students WHERE first_name= ?';
+//$stmt = $pdo->prepare($sql);
+//// ovde stavljamo promenljive koje gore zamenjuju znake pitanja
+//// red mora da se postuje !!
+//$stmt->execute([$first_name]);
+//$posts = $stmt->fetchAll(PDO::FETCH_OBJ);
+////var_dump($posts);
+//
+//foreach($posts as $post)
+//{
+//echo $post->title . '<br>';
+    public function loadTheData(int $authorId): array
     {
+        echo "a";
+        $this->pdo = new PDOConnection();
+
+        $this->pdo->prepareStatement('SELECT title,book_id,year,author_id FROM Book WHERE author_id= ?');
+
+        $this->pdo->executePDO(array(1));
+
+        $this->books = $this->pdo->fetchAll();
+
+        return $this->books;
+//
+
         global $dataBaseConnection;
         $dataBaseConnection = @mysqli_connect(DB_HOST , DB_USER , DB_PASSWORD , DB_NAME)
         OR die("Couldn't connect to MYSql" . mysqli_connect_error());
         // Create a query for the database
-        $query = 'SELECT title,book_id,year,author_id FROM Book WHERE author_id='. $id .';';
+        $query = 'SELECT title,book_id,year,author_id FROM Book WHERE author_id='. $authorId .';';
 
         // Get a response from the database by sending the connection
         // and the query
@@ -36,40 +72,37 @@
             while ($row = mysqli_fetch_array($response)) {
                 array_push($this->books, new Book($row['book_id'], $row['title'], (int)$row['year'] , $row['author_id']));
             }
-        } else {
 
-            echo "Couldn't issue database query<br />";
 
-            echo mysqli_error($dataBaseConnection);
 
         }
         return $this->books;
-    }
+        }
 
     /** Inserts a book into database
      * @param string $title
      * @param int $year
-     * @param int $id
-     * @return mixed|void
+     * @param int $authorId
+     * @return void
      */
-    public function insert(string $title, int $year , int $id)
+    public function insert(string $title, int $year , int $authorId)
     {
         global $dataBaseConnection;
 
-        $query = 'INSERT INTO Book (title,year,author_id) VALUES ("' . $title . '",'. $year .','. $id .');';
-        $response = @mysqli_query($dataBaseConnection, $query);
+        $query = 'INSERT INTO Book (title,year,author_id) VALUES ("' . $title . '",'. $year .','. $authorId .');';
+        @mysqli_query($dataBaseConnection, $query);
         echo mysqli_error($dataBaseConnection);
     }
 
     /** Deletes the chosen book
-     * @param int $id
+     * @param int $bookId
      * @return int
      */
-    public function delete(int $id): int
+    public function delete(int $bookId): int
     {
         global $dataBaseConnection;
 
-        $query = "DELETE FROM Book WHERE book_id = " . $id . ";";
+        $query = "DELETE FROM Book WHERE book_id = " . $bookId . ";";
 
         $response = @mysqli_query($dataBaseConnection, $query);
         // If the query executed properly proceed
@@ -84,29 +117,29 @@
     /** Updates the book
      * @param string $titleUpdated
      * @param int $year
-     * @param int $id
-     * @return mixed|void
+     * @param int $bookId
+     * @return void
      */
-    public function update(string $titleUpdated, int $year , int $id)
+    public function update(string $titleUpdated, int $year, int $bookId)
     {
 
         global $dataBaseConnection;
 
-        $query = "UPDATE Book SET title='" . $titleUpdated . "' , year=" . $year ." WHERE book_id = " . $id . ";";
+        $query = "UPDATE Book SET title='" . $titleUpdated . "' , year=" . $year ." WHERE book_id = " . $bookId . ";";
 
-        $response = @mysqli_query($dataBaseConnection, $query);
+        @mysqli_query($dataBaseConnection, $query);
     }
 
     /** Finds the book using its id
-     * @param int $id
+     * @param int $bookId
      * @return void
      */
-    public function findById(int $id) : Book
+    public function findById(int $bookId) : Book
     {
         $books = $this->loadTheData($_POST['authorId']);
         foreach($books as $book)
         {
-            if ($book->getId() == $id)
+            if ($book->getId() == $bookId)
             {
                 return $book;
             }
Index: Src/DataAccess/DBAuthorRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace BookStore\\DataAccess;\n\nuse BookStore\\Business\\Interfaces\\Repositories\\IAuthorRepository;\nuse BookStore\\Business\\Models\\Author;\nrequire_once(__DIR__ . \"/../mySqlConnect.php\");\n\nclass DBAuthorRepository implements IAuthorRepository\n{\n    /**\n     * @var array\n     */\n    private array $authors = array();\n\n    /** Fetch authors from the database\n     * @return array|Author[]\n     */\n    public function loadTheData(): array\n    {\n        global $dataBaseConnection;\n\n        $query = \"SELECT Author.first_name as first_name, Author.last_name as last_name , \n       Author.author_id as id , (SELECT COUNT(*) FROM Book WHERE Book.author_id=Author.author_id) as numberOfBooks FROM Author;\";\n\n        // Get a response from the database by sending the connection\n        // and the query\n        $response = @mysqli_query($dataBaseConnection, $query);\n\n        // If the query executed properly proceed\n        if ($response) {\n\n            // mysqli_fetch_array will return a row of data from the query\n            // until no further data is available\n            while ($row = mysqli_fetch_array($response)) {\n                array_push($this->authors, new Author($row['id'], $row['first_name'], $row['last_name'], $row['numberOfBooks']));\n            }\n        } else {\n            echo \"Couldn't issue database query<br />\";\n            echo mysqli_error($dataBaseConnection);\n        }\n        return $this->authors;\n    }\n\n    /** Inserts an author into the database\n     * @param string $firstName\n     * @param string $lastName\n     * @return mixed|void\n     */\n    public function insert(string $firstName, string $lastName)\n    {\n        global $dataBaseConnection;\n\n        $query = \"INSERT INTO Author (first_name,last_name) VALUES ('\" . $firstName . \"','\" . $lastName . \"');\";\n        $response = @mysqli_query($dataBaseConnection, $query);\n    }\n\n    /** Deletes the chosen author\n     * @param int $id\n     * @return int\n     */\n    public function delete(int $id): int\n    {\n        global $dataBaseConnection;\n\n        $query = \"DELETE FROM Author WHERE author_id = \" . $id . \";\";\n\n        $response = @mysqli_query($dataBaseConnection, $query);\n        // If the query executed properly proceed\n\n        if ($response) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /** Updates the author\n     * @param string $firstNameUpdated\n     * @param string $lastNameUpdated\n     * @param int $id\n     * @return mixed|void\n     */\n    public function update(string $firstNameUpdated, string $lastNameUpdated, int $id)\n    {\n        global $dataBaseConnection;\n\n        $query = \"UPDATE Author SET first_name='\" . $firstNameUpdated . \"' , last_name='\" . $lastNameUpdated . \"' WHERE author_id = \" . $id . \";\";\n        $response = @mysqli_query($dataBaseConnection, $query);\n    }\n\n\n    /**\n     * @param int $id\n     * @return Author|null\n     */\n    public function findById(int $id) : ?Author\n    {\n        $authors = $this->loadTheData();\n        foreach ($authors as $author) {\n            if ($author->getId() == $id) {\n                return $author;\n            }\n        }\n        return null;\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Src/DataAccess/DBAuthorRepository.php b/Src/DataAccess/DBAuthorRepository.php
--- a/Src/DataAccess/DBAuthorRepository.php	(revision eeb1824959cfa3342356da3205cd941578478457)
+++ b/Src/DataAccess/DBAuthorRepository.php	(date 1649412300694)
@@ -4,6 +4,7 @@
 
 use BookStore\Business\Interfaces\Repositories\IAuthorRepository;
 use BookStore\Business\Models\Author;
+
 require_once(__DIR__ . "/../mySqlConnect.php");
 
 class DBAuthorRepository implements IAuthorRepository
Index: Src/mySqlConnect.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace BookStore;\n\nDEFINE('DB_USER', 'dovla');\nDEFINE('DB_PASSWORD', 'Vladimir1.');\nDEFINE('DB_HOST', 'localhost');\nDEFINE('DB_NAME', 'probica');\n\n$db_host = getenv(\"MYSQL_DBHOST\") ?: \"localhost\";\n$db_password = getenv(\"MYSQL_PASSWORD\") ?: 'Vladimir1.';\n\nglobal $dataBaseConnection;\n\n$dataBaseConnection = @mysqli_connect($db_host, \"root\", $db_password, DB_NAME)\nor die(\"Couldn't connect to MYSql\" . mysqli_connect_error());\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Src/mySqlConnect.php b/Src/mySqlConnect.php
--- a/Src/mySqlConnect.php	(revision eeb1824959cfa3342356da3205cd941578478457)
+++ b/Src/mySqlConnect.php	(date 1649412260126)
@@ -2,16 +2,29 @@
 
 namespace BookStore;
 
-DEFINE('DB_USER', 'dovla');
-DEFINE('DB_PASSWORD', 'Vladimir1.');
-DEFINE('DB_HOST', 'localhost');
-DEFINE('DB_NAME', 'probica');
-
-$db_host = getenv("MYSQL_DBHOST") ?: "localhost";
-$db_password = getenv("MYSQL_PASSWORD") ?: 'Vladimir1.';
+DEFINE ('DB_USER' , 'root');
+DEFINE ('DB_PASSWORD', 'password');
+DEFINE ('DB_HOST', 'localhost');
+DEFINE ('DB_NAME', 'BookStore');
 
 global $dataBaseConnection;
 
-$dataBaseConnection = @mysqli_connect($db_host, "root", $db_password, DB_NAME)
-or die("Couldn't connect to MYSql" . mysqli_connect_error());
+$dataBaseConnection = @mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME)
+or die("Couldnt connect to MYSql" . mysqli_connect_error());
+
+
+//$db_host = getenv("MYSQL_DBHOST") ?: "localhost";
+//$db_password = getenv("MYSQL_PASSWORD") ?: 'password';
+
+//global $dataBaseConnection;
+
+
+//$dataBaseConnection = @mysqli_connect(DB_HOST , DB_USER , DB_PASSWORD , DB_NAME)
+//OR die("Couldnt connect to MYSql" . mysqli_connect_error());
+
+//$dataBaseConnection = @mysqli_connect(DB_HOST , DB_USER , DB_PASSWORD , DB_NAME)
+//OR die("Couldnt connect to MYSql" . mysqli_connect_error());
+
+//$dataBaseConnection = @mysqli_connect($db_host, "root", $db_password, DB_NAME)
+//or die("Couldn't connect to MYSql" . mysqli_connect_error());
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"b9564f75-7c2f-4131-9673-183dd464bf9f\" name=\"Changes\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/Dockerfile\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/Src/Business/Models/Book.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Business/AuthorService.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Business/AuthorService.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Business/BookService.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Business/BookService.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Business/Interfaces/Repositories/IAuthorRepository.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Business/Interfaces/Repositories/IAuthorRepository.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Business/Interfaces/Repositories/IBookRepository.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Business/Interfaces/Repositories/IBookRepository.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/DataAccess/DBAuthorRepository.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/DataAccess/DBAuthorRepository.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/DataAccess/DBBookRepository.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/DataAccess/DBBookRepository.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/DataAccess/SessionAuthorRepository.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/DataAccess/SessionAuthorRepository.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/DataAccess/SessionBookRepository.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/DataAccess/SessionBookRepository.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Presentation/Controllers/AuthorController.php\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Presentation/Controllers/BookController.php\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Presentation/Models/Author.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Business/Models/Author.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Presentation/Models/Book.php\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Presentation/Views/BookList.php\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Presentation/Views/CreateAuthorRedirect.php\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Presentation/Views/CreateBookPage.php\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Presentation/Views/EditAuthorView.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Presentation/Views/EditAuthorView.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Presentation/Views/EditBookView.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Presentation/Views/EditBookView.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Presentation/Views/List.php\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Routes/BookIndex.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Routes/BookIndex.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Routes/CreateAuthor.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Routes/CreateAuthor.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Routes/CreateBook.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Routes/CreateBook.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Routes/DeleteAuthor.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Routes/DeleteAuthor.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Routes/DeleteBook.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Routes/DeleteBook.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Routes/EditAuthor.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Routes/EditAuthor.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Routes/EditBook.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/Routes/EditBook.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Validations/CreateAuthorValidation.php\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Validations/CreateBookValidation.php\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Validations/EditAuthorValidation.php\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/Validations/EditBookValidation.php\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Src/mySqlConnect.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Src/mySqlConnect.php\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/composer.lock\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/index.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/index.php\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ComposerSettings\" doNotAsk=\"true\" synchronizationState=\"DONT_SYNCHRONIZE\">\n    <pharConfigPath>$PROJECT_DIR$/composer.json</pharConfigPath>\n    <execution>\n      <executable path=\"composer\" />\n    </execution>\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"HTML File\" />\n        <option value=\"composer.json\" />\n        <option value=\"JavaScript File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"JsBowerSettings\">\n    <bower-package value=\"\" />\n    <bower.json value=\"\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"PhpDebugGeneral\" ignore_connections_through_unregistered_servers=\"true\" listening_started=\"true\" />\n  <component name=\"PhpServers\">\n    <servers>\n      <server host=\"bookstore.test\" id=\"2d4cae47-9350-45cd-8baa-4af84db401e2\" name=\"bookstore.test\" />\n    </servers>\n  </component>\n  <component name=\"PhpWebServerValidation\" path_to_validation_script=\"$PROJECT_DIR$\" selected_validation_type=\"LOCAL\" web_path_to_validation_script=\"http://bookstore.test\" />\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"PHP 7.4\">\n    <include_path>\n      <path value=\"$PROJECT_DIR$/vendor/composer\" />\n    </include_path>\n  </component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\n  </component>\n  <component name=\"ProjectId\" id=\"26EwQLT3zEp9Ifn8MWnWzZej04W\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\n    <property name=\"Constants\" value=\"false\" />\n    <property name=\"DatabaseDriversLRU\" value=\"mysql\" />\n    <property name=\"DefaultHtmlFileTemplate\" value=\"HTML File\" />\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Src/PresentationSPA\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.detected.package.stylelint\" value=\"true\" />\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.stylelint\" value=\"\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n    <property name=\"php.override.implement.member.chooser.php.doc\" value=\"NONE\" />\n    <property name=\"run.code.analysis.last.selected.profile\" value=\"pProject Default\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"Docker\" />\n    <property name=\"vue.rearranger.settings.migration\" value=\"true\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/Src/PresentationSPA\" />\n      <recent name=\"$PROJECT_DIR$/Src/Presentation/Views\" />\n      <recent name=\"$PROJECT_DIR$/Src/PresentationSPA/Controllers\" />\n      <recent name=\"$PROJECT_DIR$/Src/Presentation/Controllers\" />\n      <recent name=\"$PROJECT_DIR$/Business\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/Src/PresentationSPA\" />\n      <recent name=\"$PROJECT_DIR$/Src/Business\" />\n      <recent name=\"$PROJECT_DIR$/Src\" />\n      <recent name=\"$PROJECT_DIR$/DataAccess\" />\n      <recent name=\"$PROJECT_DIR$/Presentation\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"bookstore.test\" type=\"PhpWebAppRunConfigurationType\" factoryName=\"PHP Web Application\" server_name=\"bookstore.test\">\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"b9564f75-7c2f-4131-9673-183dd464bf9f\" name=\"Changes\" comment=\"\" />\n      <created>1647002035467</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1647002035467</updated>\n      <workItem from=\"1647002036537\" duration=\"48000\" />\n      <workItem from=\"1647003968349\" duration=\"2533000\" />\n      <workItem from=\"1647245314370\" duration=\"4895000\" />\n      <workItem from=\"1647251657977\" duration=\"976000\" />\n      <workItem from=\"1647252644260\" duration=\"97000\" />\n      <workItem from=\"1647252751676\" duration=\"17827000\" />\n      <workItem from=\"1647334553532\" duration=\"24077000\" />\n      <workItem from=\"1647415853815\" duration=\"41457000\" />\n      <workItem from=\"1647504404567\" duration=\"17463000\" />\n      <workItem from=\"1647593370699\" duration=\"620000\" />\n      <workItem from=\"1647609650547\" duration=\"4033000\" />\n      <workItem from=\"1647613695579\" duration=\"8158000\" />\n      <workItem from=\"1647850311302\" duration=\"19085000\" />\n      <workItem from=\"1647940575416\" duration=\"8481000\" />\n      <workItem from=\"1648024374028\" duration=\"215000\" />\n      <workItem from=\"1648024599842\" duration=\"226000\" />\n      <workItem from=\"1648025743489\" duration=\"2868000\" />\n      <workItem from=\"1648032007901\" duration=\"16785000\" />\n      <workItem from=\"1648052065399\" duration=\"8106000\" />\n      <workItem from=\"1648109920410\" duration=\"7059000\" />\n      <workItem from=\"1648118942325\" duration=\"17819000\" />\n      <workItem from=\"1648198191374\" duration=\"21421000\" />\n      <workItem from=\"1648452591731\" duration=\"21391000\" />\n      <workItem from=\"1648540207046\" duration=\"29873000\" />\n      <workItem from=\"1648624269064\" duration=\"22991000\" />\n      <workItem from=\"1648710698818\" duration=\"27785000\" />\n      <workItem from=\"1648798122327\" duration=\"25134000\" />\n      <workItem from=\"1649056746605\" duration=\"26416000\" />\n      <workItem from=\"1649142283475\" duration=\"24374000\" />\n      <workItem from=\"1649229739556\" duration=\"16879000\" />\n      <workItem from=\"1649251649064\" duration=\"3607000\" />\n      <workItem from=\"1649317477239\" duration=\"6775000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <watches-manager>\n      <configuration name=\"EditAuthorView.php\">\n        <watch expression=\"$_SESSION\" />\n      </configuration>\n    </watches-manager>\n  </component>\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\n    <expand>\n      <path>\n        <item name=\"BookStore\" type=\"b2602c69:ProjectViewProjectNode\" />\n        <item name=\"BookStore\" type=\"462c0819:PsiDirectoryNode\" />\n      </path>\n    </expand>\n    <select />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision eeb1824959cfa3342356da3205cd941578478457)
+++ b/.idea/workspace.xml	(date 1649412973335)
@@ -5,41 +5,17 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="b9564f75-7c2f-4131-9673-183dd464bf9f" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/Dockerfile" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Src/Business/Models/Book.php" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Src/PDOConnection.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Business/AuthorService.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Business/AuthorService.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Src/Business/BookService.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Business/BookService.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Src/Business/Interfaces/Repositories/IAuthorRepository.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Business/Interfaces/Repositories/IAuthorRepository.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Src/Business/Interfaces/Repositories/IBookRepository.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Business/Interfaces/Repositories/IBookRepository.php" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Src/Business/Models/Author.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Business/Models/Author.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Src/DataAccess/DBAuthorRepository.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/DataAccess/DBAuthorRepository.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Src/DataAccess/DBBookRepository.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/DataAccess/DBBookRepository.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/DataAccess/SessionAuthorRepository.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/DataAccess/SessionAuthorRepository.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Src/DataAccess/SessionBookRepository.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/DataAccess/SessionBookRepository.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Presentation/Controllers/AuthorController.php" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Presentation/Controllers/BookController.php" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Presentation/Models/Author.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Business/Models/Author.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Presentation/Models/Book.php" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Presentation/Views/BookList.php" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Presentation/Views/CreateAuthorRedirect.php" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Presentation/Views/CreateBookPage.php" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Presentation/Views/EditAuthorView.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Presentation/Views/EditAuthorView.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Presentation/Views/EditBookView.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Presentation/Views/EditBookView.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Presentation/Views/List.php" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Routes/BookIndex.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Routes/BookIndex.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Routes/CreateAuthor.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Routes/CreateAuthor.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Routes/CreateBook.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Routes/CreateBook.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Routes/DeleteAuthor.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Routes/DeleteAuthor.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Routes/DeleteBook.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Routes/DeleteBook.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Routes/EditAuthor.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Routes/EditAuthor.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Routes/EditBook.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Routes/EditBook.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Validations/CreateAuthorValidation.php" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Validations/CreateBookValidation.php" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Validations/EditAuthorValidation.php" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Src/Validations/EditBookValidation.php" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/Src/Presentation/Controllers/AuthorController.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/Presentation/Controllers/AuthorController.php" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Src/mySqlConnect.php" beforeDir="false" afterPath="$PROJECT_DIR$/Src/mySqlConnect.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/composer.lock" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/index.php" beforeDir="false" afterPath="$PROJECT_DIR$/index.php" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -107,7 +83,7 @@
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$/Src/PresentationSPA" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/../PDO_Ucenje/index.php" />
     <property name="node.js.detected.package.eslint" value="true" />
     <property name="node.js.detected.package.stylelint" value="true" />
     <property name="node.js.detected.package.tslint" value="true" />
@@ -181,13 +157,47 @@
       <workItem from="1649229739556" duration="16879000" />
       <workItem from="1649251649064" duration="3607000" />
       <workItem from="1649317477239" duration="6775000" />
+      <workItem from="1649343199242" duration="353000" />
+      <workItem from="1649402708719" duration="5518000" />
+      <workItem from="1649408331623" duration="886000" />
+      <workItem from="1649411423875" duration="1550000" />
     </task>
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
   </component>
   <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="php">
+          <url>file://$PROJECT_DIR$/Src/DataAccess/DBBookRepository.php</url>
+          <line>46</line>
+          <option name="timeStamp" value="11" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="php">
+          <url>file://$PROJECT_DIR$/Src/PDOConnection.php</url>
+          <line>10</line>
+          <option name="timeStamp" value="12" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="php">
+          <url>file://$PROJECT_DIR$/Src/DataAccess/DBBookRepository.php</url>
+          <line>62</line>
+          <option name="timeStamp" value="14" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
     <watches-manager>
       <configuration name="EditAuthorView.php">
         <watch expression="$_SESSION" />
Index: Src/Business/BookService.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace BookStore\\Business;\n\nuse BookStore\\Business\\Interfaces\\Repositories\\IBookRepository;\nuse BookStore\\Business\\Models\\Book;\n\nclass BookService\n{\n    /**\n     * @var IBookRepository\n     */\n    private IBookRepository $bookRepository;\n\n    /**\n     * @param IBookRepository $repository\n     */\n    public function __construct(IBookRepository $repository)\n    {\n        $this->bookRepository = $repository;\n    }\n\n    /** Fetch the books from the database\n     * @param int $id\n     * @return array\n     */\n    public function LoadTheData(int $id) : array\n    {\n        return $this->bookRepository->loadTheData($id);\n    }\n\n\n    /** Deletes the chosen book\n     * @param int $id\n     * @return int\n     */\n    public function delete(int $id) : int\n    {\n        if ($this->bookRepository->delete($id)) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n    /** Inserts a book into database\n     * @param string $title\n     * @param int $year\n     * @param int $id\n     * @return void\n     */\n    public function insert(string $title , int $year, int $id)\n    {\n        $this->bookRepository->insert($title, $year, $id);\n    }\n\n    /** Finds the book using its id\n     * @param int $id\n     * @return void\n     */\n    public function findById(int $id) : Book\n    {\n        return $this->bookRepository->findById($id);\n    }\n\n    /** Updates the book\n     * @param string $name\n     * @param int $year\n     * @param int $id\n     * @return void\n     */\n    public function update(string $title , int $year , int $id)\n    {\n        $this->bookRepository->update($title,$year, $id);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Src/Business/BookService.php b/Src/Business/BookService.php
--- a/Src/Business/BookService.php	(revision eeb1824959cfa3342356da3205cd941578478457)
+++ b/Src/Business/BookService.php	(date 1649339707769)
@@ -70,6 +70,6 @@
      */
     public function update(string $title , int $year , int $id)
     {
-        $this->bookRepository->update($title,$year, $id);
+        $this->bookRepository->update($year, $year, $id);
     }
 }
\ No newline at end of file
Index: Src/Business/Models/Author.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace BookStore\\Presentation\\Models;\nclass Author\n{\n    public int $id;\n    private string $firstName;\n    private string $lastName;\n\n    /**\n     * @param String $firstName\n     */\n    public function setFirstName(string $firstName): void\n    {\n        $this->firstName = $firstName;\n    }\n\n    /**\n     * @param String $lastName\n     */\n    public function setLastName(string $lastName): void\n    {\n        $this->lastName = $lastName;\n    }\n\n    /**\n     * @param String $books\n     */\n    public function setBooks(string $books): void\n    {\n        $this->books = $books;\n    }\n\n    private string $books;\n\n    public function getId(): int\n    {\n        return $this->id;\n    }\n\n    public function getBooks(): string\n    {\n        return $this->books;\n    }\n\n    public function getFirstName(): string\n    {\n        return $this->firstName;\n    }\n\n    public function getLastName(): string\n    {\n        return $this->lastName;\n    }\n\n    public function __construct(int $id, string $firstName, string $lastName, string $books)\n    {\n        $this->id = $id;\n        $this->books = $books;\n        $this->firstName = $firstName;\n        $this->lastName = $lastName;\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Src/Business/Models/Author.php b/Src/Business/Models/Author.php
--- a/Src/Business/Models/Author.php	(revision eeb1824959cfa3342356da3205cd941578478457)
+++ b/Src/Business/Models/Author.php	(date 1649412300678)
@@ -1,6 +1,7 @@
 <?php
 
-namespace BookStore\Presentation\Models;
+namespace BookStore\Business\Models;
+
 class Author
 {
     public int $id;
Index: Src/Presentation/Controllers/AuthorController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace BookStore\\Presentation\\Controllers;\n//require \"./vendor/autoload.php\";\n\nuse BookStore\\Business\\AuthorService;\n\nclass AuthorController\n{\n    private AuthorService $as;\n    public array $authors = array();\n\n\n    public function __construct()\n    {\n        $this->as = new AuthorService();\n    }\n\n    public function intialize()\n    {\n        $this->authors = $this->as->loadTheData();\n\n        include __DIR__ . '/../Views/List.php';\n    }\n\n    public function list()\n    {\n        $this->authors = $this->as->loadTheData();\n\n        include __DIR__ . '/../Views/List.php';\n    }\n\n    public function delete()\n    {\n        if ($this->as->delete($_POST[\"id\"])) {\n            echo '<script>alert(\"Author successfully deleted\")</script>';\n            $this->list();////////\n        } else {\n            echo '<script>alert(\"A problem came up during the deletion\")</script>';\n        }\n    }\n\n    public function insert()\n    {\n        $this->authors = $this->as->insert($_SESSION[\"fName\"], $_SESSION[\"lName\"]);\n        include __DIR__ . '/../Views/List.php';\n    }\n\n    public function findById()\n    {\n        //if (get_class($this->ar) == 'SessionAuthorRepository')\n            //$this->ar->findById();\n        include 'Presentation/Views/EditAuthorView.php';\n    }\n\n    public function update()\n    {\n        if (get_class($this->as) == 'SessionAuthorRepository') {\n            //$this->as->findById();\n        }\n\n        $this->as->update($_SESSION[\"fNameUpdated\"], $_SESSION[\"lNameUpdated\"], $_SESSION[\"id\"]);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Src/Presentation/Controllers/AuthorController.php b/Src/Presentation/Controllers/AuthorController.php
--- a/Src/Presentation/Controllers/AuthorController.php	(revision eeb1824959cfa3342356da3205cd941578478457)
+++ b/Src/Presentation/Controllers/AuthorController.php	(date 1649412603006)
@@ -4,6 +4,7 @@
 //require "./vendor/autoload.php";
 
 use BookStore\Business\AuthorService;
+use BookStore\DataAccess\DBAuthorRepository;
 
 class AuthorController
 {
@@ -13,21 +14,18 @@
 
     public function __construct()
     {
-        $this->as = new AuthorService();
+        $this->as = new AuthorService(new DBAuthorRepository());
     }
 
     public function intialize()
     {
         $this->authors = $this->as->loadTheData();
-
-        include __DIR__ . '/../Views/List.php';
     }
 
     public function list()
     {
         $this->authors = $this->as->loadTheData();
-
-        include __DIR__ . '/../Views/List.php';
+        include __DIR__ . '/../Views/AuthorView.php';
     }
 
     public function delete()
Index: Src/PDOConnection.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Src/PDOConnection.php b/Src/PDOConnection.php
new file mode 100644
--- /dev/null	(date 1649406505953)
+++ b/Src/PDOConnection.php	(date 1649406505953)
@@ -0,0 +1,40 @@
+<?php
+
+namespace BookStore;
+
+use PDO;
+use PDOStatement;
+
+class PDOConnection
+{
+
+    private string $host = 'localhost';
+    private string $user = 'root';
+    private string $password = 'Vladimir1.';
+    private string $dbname = 'probica';
+    private PDO $pdo;
+    private PDOStatement $statement;
+
+    public function __construct()
+    {
+        // set DSN
+        $dsn = 'mysql:host=' . $this->host . ';dbname=' . $this->dbname;
+        $this->pdo = new PDO($dsn, $this->user, $this->password);
+        $this->pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES,FALSE);
+    }
+
+    public function prepareStatement(string $sql)
+    {
+        $this->statement = $this->pdo->prepare($sql);
+    }
+
+    public function executePDO(array $arguments)
+    {
+        $this->statement->execute($arguments);
+    }
+
+    public function fetchAll()
+    {
+        return $this->statement->fetchAll(PDO::FETCH_OBJ);
+    }
+}
\ No newline at end of file
